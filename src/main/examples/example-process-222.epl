// This is the source of the BPMN
//https://academic.signavio.com/p/editor?id=00c87d562dee4e7da346f0bc3bca9e19

// create the schemas for events, tables, and named windows
// Map of the event payload
create map schema Property_Values as (property string, value object)
// Schema for the event generated for a process instance progress
create schema Process_Event(PM_ID int, CASE_ID int , Node_ID string, Cycle_Num int, State string, Pay_Load Property_Values, Time_stamp timestamp)

//Create the table that holds case variables
create table Case_Variables (PM_ID int, CASE_ID int, Variables Property_Values)

//Variables?
create variable currentPM_ID = 1
//Example specific variables
create variable cond1=true
create variable cond2=false
create variable cond4=false
create variable cond3=true

// functions
create expression string js:getPMFromContext() [ 
    getPMFromContext();
    function getPMFromContext(){

        return currentPM_ID;
    }

];

create expression boolean js:Evaluate( caseVariables, condition)
[
    Evaluate(caseVariables, condition);
    function Evaluate(caseVariables, condition)
    {
        if (condition === "true")
            return true;
        if (condition === "Cond1")
            return caseVariables[cond1];
        if (condition === "Cond2")
            return caseVariables[cond2];
        if (condition === "Cond3")
            return caseVariables[cond4;
        if (condition === "Cond4")
            return return caseVariables[cond4];
        return false;
    }
];

//History (named window)
create window Execution_History.win:keepall() as Process_Event insert

// Start event
insert into Process_Event
select getPMFromContext(), Coalesce((select max(Case_ID)+1 from Execution_History where PM_ID = getPMFromContext()),1), "SE1",0,"completed", null, current_timestamp
//Inititate case variables as a response to the start event
insert into Case_Variables (PM_ID, CASE_ID, Variables ) 
select st.PM_ID, st.CASE_ID, new {cond1 =  true, cond2 = false, cond3 = true, cond4 = false} from Process_Event(Node_ID="SE1", state="completed") as st

// Activity A
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "A", Pred.Cycle_Num, 
case when pred.state="completed" and  Evaluate(CV.variables, "true") = true then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "SE1"


// XOR-join, when one of the inputs is forming a loop
//The loopless entry point
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.Case_ID, "XJ-1", pred.Cycle_Num, case pred.state when "completed" then "started" else "skipped" end, null, current_timestamp
from Process_Event (state in ("completed","skipped") , Node_ID="A") as pred 

// OR-split
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "OS-1", Pred.Cycle_Num, 
case when pred.state="completed" then "completed" else "skipped" end,
null, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "XJ-1"

// Activity B
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "B", Pred.Cycle_Num, 
case when pred.state="completed" and  Evaluate(CV.variables, "Cond1") = true then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "OS-1"

// AND Split
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "AS-1", Pred.Cycle_Num, 
case when pred.state="completed" and  Evaluate(CV.variables, "Cond2") = true then "completed" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "OS-1"


// Activity C
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "C", pred.Cycle_Num, 
case when pred.state="completed" then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "AS-1"

// Activity D
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "D", pred.Cycle_Num, 
case when pred.state="completed" then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "AS-1"


// AND-join
insert into Process_Event
select pred.PM_ID, pred.Case_ID, "AJ-1", pred.cycle_num, case pred.state when "completed" then "completed" else "skipped" end, current_timestamp
from Process_Event as pred
where pred.state in ("completed", "skipped")
and (select count(1) from Execution_History as H where H.Node_ID in ("C","D") and H.Cycle_Num = pred.Cycle_Num
and H.State = pred.State) = 2 -// all predecessors have appeared with the same condition as the current pred
// Not having already enacted the node in response for another response.
and not exists (select 1 from Execution_History as H where H.Node_ID = "AJ-1" and H.Cycle_Num = pred.Cycle_Num)


// OR-join
insert into Process_Event
select pred.PM_ID, pred.Case_ID, "OJ-1", pred.cycle_num, case pred.state when "completed" then "completed" else "skipped" end, current_timestamp
from Process_Event as pred
where pred.state in ("completed", "skipped")
and (select count(1) from Execution_History as H where H.Node_ID in ("B", "AJ-1") and H.Cycle_Num = pred.Cycle_Num 
and H.state in ("completed", "skipped")) = 2 // all predecessors have appeared in any condition of either skipped or completed
// Not having already enacted the node in response for another response.
and not exists (select 1 from Execution_History as H where H.Node_ID = "OJ-1" and H.Cycle_Num = pred.Cycle_Num)

// XOR-Split
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "XS-1", pred.Cycle_Num, 
case when pred.state="completed" then "completed" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "OJ-1"


// Activity F
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "F", Pred.Cycle_Num, 
case when pred.state="completed" and  Evaluate(CV.variables, "Cond4") = true then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "XS-1"


// End event
insert into Process_Event(PM_ID, CASE_ID, Node_ID, Cycle_Num, state, Pay_Load, Time_stamp)
select pred.PM_ID, pred.CASE_ID, "EE-1", pred.Cycle_Num, 
case when pred.state="completed" then "started" else "skipped" end,
CV.Variables, current_timestamp 
From Process_Event as pred join Case_Variables as CV on pred.PM_ID = CV.PM_ID and pred.CASE_ID = CV.Case_ID
where pred.state in ("completed", "skipped") and pred.Node_ID = "F"