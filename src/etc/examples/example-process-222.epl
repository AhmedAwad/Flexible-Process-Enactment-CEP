// This is the source of the BPMN
//https://academic.signavio.com/p/editor?id=00c87d562dee4e7da346f0bc3bca9e19

// create the schemas for events, tables, and named windows
// Map of the event payload
create map schema Property_Values as (property string, value java.lang.Object);
// Schema for the event generated for a process instance progress
//create schema Process_Event(pmID int, caseID int , nodeID string, cycleNum int, state string, Pay_Load Property_Values, Time_stamp timestamp)

//Create the table that holds case variables
create table Case_Variables (pmID int, caseID int, variables Property_Values);

//Variables?
create variable int currentpmID = 1;
//Example specific variables
create variable boolean cond1=true;
create variable boolean cond2=false;
create variable boolean cond4=false;
create variable boolean cond3=true;

// functions
create expression int js:getPMFromContext() [
    getPMFromContext();
    function getPMFromContext(){

        return currentpmID;
    }

];

create expression boolean js:evaluate(caseVariables, cond) [
    evaluate(caseVariables, cond);
    function evaluate(caseVariables, cond){
        if (cond == "true")
        {
            return true;
        }
        if (cond == "Cond1")
        {
            return caseVariables[cond1];
        }
        if (cond == "Cond2")
        {
            return caseVariables[cond2];
        }
        if (cond == "Cond3")
        {
            return caseVariables[cond4];
        }
        if (cond == "Cond4")
        {
            return caseVariables[cond4];
        }
        return false;
    }
];


//History (named window)
create window Execution_History#keepall as  select * from Process_Event;

// Start event -- this shall be injected from outside
//insert into Process_Event
//select getPMFromContext(), Coalesce((select max(caseID)+1 from Execution_History where pmID = getPMFromContext()),1), "SE1",0,"completed", null, current_timestamp;
//Inititate case variables as a response to the start event
insert into Case_Variables (pmID, caseID, variables )
select st.pmID, st.caseID, new {cond1 =  true, cond2 = false, cond3 = true, cond4 = false} from Process_Event(nodeID="SE1", state="completed") as st;

// Activity A
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, Pay_Load, Time_stamp)
select pred.pmID, pred.caseID, "A", pred.cycleNum,
case when pred.state="completed" and  evaluate(CV.variables, "true") = true then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "SE1";

// XOR-join, when one of the inputs is forming a loop
//The loopless entry point
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "XJ-1", pred.cycleNum, case pred.state when "completed" then "started" else "skipped" end, null, current_timestamp
from Process_Event (state in ("completed","skipped") , nodeID="A") as pred;


// OR-split
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "OS-1", pred.cycleNum,
case when pred.state="completed" then "completed" else "skipped" end,
null, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "XJ-1";

// Activity B
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "B", pred.cycleNum,
case when pred.state="completed" and  evaluate(CV.variables, "Cond1") = true then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "OS-1";

// AND Split
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "AS-1", pred.cycleNum,
case when pred.state="completed" and  evaluate(CV.variables, "Cond2") = true then "completed" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "OS-1";

// Activity C
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "C", pred.cycleNum,
case when pred.state="completed" then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "AS-1";

// Activity D
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "D", pred.cycleNum,
case when pred.state="completed" then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "AS-1";


// AND-join
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "AJ-1", pred.cycleNum, case pred.state when "completed" then "completed" else "skipped" end,null, current_timestamp
from Process_Event as pred
where pred.state in ("completed", "skipped")
and (select count(1) from Execution_History as H where H.nodeID in ("C","D") and H.cycleNum = pred.cycleNum
and H.state = pred.state) = 2 // all predecessors have appeared with the same condition as the current pred
// Not having already enacted the node in response for another response.
and not exists (select 1 from Execution_History as H where H.nodeID = "AJ-1" and H.cycleNum = pred.cycleNum);


// OR-join
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "OJ-1", pred.cycleNum, case pred.state when "completed" then "completed" else "skipped" end, null, current_timestamp
from Process_Event as pred
where pred.state in ("completed", "skipped")
and (select count(1) from Execution_History as H where H.nodeID in ("B", "AJ-1") and H.cycleNum = pred.cycleNum
and H.state in ("completed", "skipped")) = 2 // all predecessors have appeared in any condition of either skipped or completed
// Not having already enacted the node in response for another response.
and not exists (select 1 from Execution_History as H where H.nodeID = "OJ-1" and H.cycleNum = pred.cycleNum);


// XOR-Split
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "XS-1", pred.cycleNum,
case when pred.state="completed" then "completed" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "OJ-1";

// Activity F
// Template to handle activity nodes that have a single predecessor
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "F", pred.cycleNum,
case when pred.state="completed" and  evaluate(CV.variables, "Cond4") = true then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "XS-1";


// End event
insert into Process_Event(pmID, caseID, nodeID, cycleNum, state, payLoad, timestamp)
select pred.pmID, pred.caseID, "EE-1", pred.cycleNum,
case when pred.state="completed" then "started" else "skipped" end,
CV.variables, current_timestamp
From Process_Event as pred join Case_Variables as CV on pred.pmID = CV.pmID and pred.caseID = CV.caseID
where pred.state in ("completed", "skipped") and pred.nodeID = "F";
